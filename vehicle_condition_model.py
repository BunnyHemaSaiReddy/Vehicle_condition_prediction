# -*- coding: utf-8 -*-
"""vehicle condition model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10v_LYW9Cdx_A4XEePlQ8zQVf_Da142HA
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

import google.colab as colab
f=colab.files.upload()

data=pd.read_excel('vehicle.xlsx')

data.columns

data.head(10)

data.shape

data.isna()

data.isna().sum()

data=data.bfill()

data.isna().sum()

data=data.dropna()

data.isna().sum()

data.shape

data.head(2).to_string()

cov=data.cov()

import seaborn
seaborn.heatmap(cov)

plt.plot(data["Car Condition"],data["Engine Health"])
plt.show()

data.hist(figsize=(15, 12), bins=20, edgecolor='black')
plt.suptitle("Histogram of Car Condition Features", fontsize=16)
plt.show()

import matplotlib.pyplot as plt

for col in data.columns:
    if col != "Car Condition":
        plt.figure(figsize=(8, 5))
        plt.plot(data["Car Condition"], data[col], marker='o', linestyle='-', color='b', label=col)
        plt.xlabel("Car Condition")
        plt.ylabel(col)
        plt.title(f"Car Condition vs {col}")
        plt.legend()
        plt.grid(True)
        plt.show()

from sklearn.model_selection import train_test_split

from sklearn.neural_network import MLPRegressor
from sklearn.tree import DecisionTreeRegressor

from sklearn.metrics import mean_squared_error

X_train, X_test, y_train, y_test = train_test_split(data.drop('Car Condition', axis=1), data['Car Condition'], test_size=0.2, random_state=42)

model=MLPRegressor(hidden_layer_sizes=(100, 50), activation='relu', solver='adam', random_state=42)

model.fit(X_train, y_train)

pre=model.predict(X_test)
pre

model.score(X_test,y_test)

plt.scatter(pre,y_test)

mean_squared_error(pre,y_test)

from sklearn.metrics import r2_score
f"{r2_score(pre,y_test)*100:.2f}"

model=DecisionTreeRegressor()

model.fit(X_train,y_train)

model.score(X_test,y_test)

from sklearn.ensemble import StackingRegressor
from sklearn.ensemble import RandomForestRegressor

model=StackingRegressor(estimators=[('mlp',MLPRegressor()),('dt',DecisionTreeRegressor()),('rf',RandomForestRegressor())])

model.fit(X_train,y_train)

model.score(X_test,y_test)

pre=model.predict(X_test)

mean_squared_error(pre,y_test)

import pickle

pickle.dump(model,open('vehicle.pkl','wb'))

pre=pickle.load(open('vehicle.pkl','rb'))

pre.predict(X_test)

X_test.iloc[0].to_list()